input { 
    file { 
        path => "/home/watcher/watcher/logs/watcher.log" 
        id => "watcher" 
    } 
} 
filter {
    if "changed" in [message] {
        if "p2p" in [message] or "transit" in [message] {
            # 2023-01-01T00:00:00Z,demo-watcher,metric,10.1.14.4,changed,old_cost:10,new_cost:123,10.1.1.4,p2p,10.1.1.1,01Jan2023_00h00m00s_7_hosts
            # 2023-08-07T10:44:38Z,demo-watcher,metric,10.1.123.24,changed,old_cost:10,new_cost:777,10.1.123.24,transit,10.1.123.24_10.1.1.2_10.1.123.23,01Jan2023_00h00m00s_7_hosts
            dissect { 
                    mapping => { "message" => "%{watcher_time},%{watcher_name},%{event_name},%{event_object},%{event_status},old_cost:%{old_cost},new_cost:%{new_cost},%{event_detected_by},%{subnet_type},%{shared_subnet_remote_neighbors_ids},%{graph_time}"}  
                
                    add_field => {  "[@metadata][elasticsearch_index]" => "watcher-costs-changes"
                                    "[@metadata][mongo_id]" => "output_mongo_cost"
                                    "[@metadata][mongo_collection_name]" => "cost_change"
                                    "[@metadata][zabbix_host]" => "ospf_link_cost_change" 
                                    "[@metadata][zabbix_server_host]" => "${ZABBIX_HOST:127.0.0.1}"
                                    "[@metadata][z_object_item_name]" => "ospf_link_cost_change"
                                    "[@metadata][z_item_value]" => "OSPF link cost changed between:%{event_object}-%{shared_subnet_remote_neighbors_ids}, old:%{old_cost}, new:%{new_cost}, detected by:%{event_detected_by}"
                                    "[@metadata][webhook_item_value]" => "OSPF link cost changed between:%{event_object}-%{shared_subnet_remote_neighbors_ids}, old:%{old_cost}, new:%{new_cost}, detected by:%{event_detected_by}" } }
        }
        else {
            # 2023-01-01T00:00:00Z,demo-watcher,metric,10.1.14.0/24,changed,old_cost:10,new_cost:123,10.1.1.4,stub,10.1.1.4,01Jan2023_00h00m00s_7_hosts
            dissect { 
                mapping => { "message" => "%{watcher_time},%{watcher_name},%{event_name},%{event_object},%{event_status},old_cost:%{old_cost},new_cost:%{new_cost},%{event_detected_by},%{subnet_type},%{shared_subnet_remote_neighbors_ids},%{graph_time}"}  
            
                add_field => {  "[@metadata][elasticsearch_index]" => "watcher-costs-changes"
                                "[@metadata][mongo_id]" => "output_mongo_cost"
                                "[@metadata][mongo_collection_name]" => "cost_change"
                                "[@metadata][zabbix_host]" => "ospf_network_cost_change" 
                                "[@metadata][zabbix_server_host]" => "${ZABBIX_HOST:127.0.0.1}"
                                "[@metadata][z_object_item_name]" => "ospf_stub_network_cost_change"
                                "[@metadata][z_item_value]" => "OSPF network cost changed:%{event_object}, old:%{old_cost}, new:%{new_cost}, detected by:%{event_detected_by}"
                                "[@metadata][webhook_item_value]" => "OSPF network cost changed:%{event_object}, old:%{old_cost}, new:%{new_cost}, detected by:%{event_detected_by}" } }
            }
    }
    else {
        # Up/Down event for OSPF neighbors and subnets
        if "network" in [message] {
            # Up/Down subnets
            dissect { 
                # 2023-01-01T00:00:00ZZ,demo-watcher,network,172.17.1.0/24,down,10.1.1.4,01Jan2023_00h00m00s_7_hosts
                mapping => { "message" => "%{watcher_time},%{watcher_name},%{event_name},%{event_object},%{event_status},%{event_detected_by},%{graph_time}"} 

                # network disappeared from OSPF domain
                add_field => {  "[@metadata][elasticsearch_index]" => "watcher-updown-events"
                                "[@metadata][mongo_id]" => "output_mongo_neighbors"
                                "[@metadata][mongo_collection_name]" => "adj_change"
                                "[@metadata][zabbix_host]" => "ospf_network_up_down" 
                                "[@metadata][zabbix_server_host]" => "${ZABBIX_HOST:127.0.0.1}"
                                "[@metadata][z_object_item_name]" => "ospf_network_up_down"
                                "[@metadata][z_item_value]" => "OSPF %{event_name}:%{event_object} %{event_status}, detected by:%{event_detected_by}"
                                "[@metadata][webhook_item_value]" => "OSPF %{event_name}:%{event_object} %{event_status}, detected by:%{event_detected_by}" } } 
        } 
        else {
            dissect { 
            # 2023-01-01T00:00:00ZZ,demo-watcher,host,10.1.1.2,down,10.1.1.4,01Jan2023_00h00m00s_7_hosts
            mapping => { "message" => "%{watcher_time},%{watcher_name},%{event_name},%{event_object},%{event_status},%{event_detected_by},%{graph_time}"} 
            
                add_field => {  "[@metadata][elasticsearch_index]" => "watcher-updown-events"
                                "[@metadata][mongo_id]" => "output_mongo_neighbors"
                                "[@metadata][mongo_collection_name]" => "adj_change"
                                "[@metadata][zabbix_host]" => "ospf_neighbor_up_down" 
                                "[@metadata][zabbix_server_host]" => "${ZABBIX_HOST:127.0.0.1}"
                                "[@metadata][z_object_item_name]" => "ospf_neighbor_up_down"
                                "[@metadata][z_item_value]" => "OSPF %{event_name}:%{event_object} %{event_status}, detected by:%{event_detected_by}"
                                "[@metadata][webhook_item_value]" => "OSPF %{event_name}:%{event_object} %{event_status}, detected by:%{event_detected_by}" } } 
        }
    }
}
output { 
    if "${EXPORT_TO_MONGO_BOOL:}" == "True" {
        # Warning, blocks pipeline. If MONGO DB Host is not available it will block all others outputs!
        pipeline {
            send_to => [outputMongo]
        } }
    if "${EXPORT_TO_ELASTICSEARCH_BOOL:}" == "True" {
        # Warning, if ELK host is not available it will block all others outputs!
        pipeline {
            send_to => [outputElastic]
        } }
    if "${EXPORT_TO_ZABBIX_BOOL:}" == "True" {
        # Doesn't block the pipeline. If Zabbix host is unavailable, only ERROR message will be printed
        zabbix {
            zabbix_host => "[@metadata][zabbix_host]"
            zabbix_server_host => "${ZABBIX_HOST:127.0.0.1}"
            zabbix_key => "[@metadata][z_object_item_name]"
            zabbix_value => "[@metadata][z_item_value]"
        } }
    if "${EXPORT_TO_WEBHOOK_URL_BOOL:}" == "True" {
        http {
            url => "${WEBHOOK_URL:}"
            format => "json"
            http_method => "post"
            mapping => ["text", "%{[@metadata][webhook_item_value]}"]
            automatic_retries => 1
            retry_failed => false
        }
    }
}