input { 
    file { 
        path => "/home/watcher/watcher/logs/watcher*.ospf.log" 
        id => "watcher" 
    } 
} 
filter {
    if [message] == "" {
        drop { }
    }
    if "changed" in [message] {
        if "metric" in [message] {
            # 2024-07-22T20:19:05Z,watcher-local,metric,10.10.10.5,changed,old_cost:4444,new_cost:444,10.10.10.4,01Jan2023_00h00m00s_7_hosts,0.0.0.0,65001
            # 2024-07-22T20:28:06Z,watcher-local,metric,10.10.10.2,changed,old_cost:10,new_cost:-1,10.10.10.3,01Jan2023_00h00m00s_7_hosts,0.0.0.0,65001
            dissect { 
                mapping => { "message" => "%{watcher_time},%{watcher_name},%{event_name},%{event_object},%{event_status},old_cost:%{old_cost},new_cost:%{new_cost},%{event_detected_by},%{graph_time},%{area_num},%{asn}"}  
            }

            if "-1" == [new_cost] {
                mutate {
                    add_field => {
                        "[@metadata][elasticsearch_index]" => "ospf-watcher-updown-events"
                        "[@metadata][mongo_id]" => "output_mongo_neighbors"
                        "[@metadata][mongo_collection_name]" => "adj_change"
                        "[@metadata][zabbix_host]" => "ospf_neighbor_up_down" 
                        "[@metadata][z_object_item_name]" => "ospf_neighbor_up_down"

                        "[@metadata][z_item_value]" => "OSPF down between:%{event_object}-%{event_detected_by}, cost:%{new_cost}, detected by:%{event_detected_by}"
                        "[@metadata][webhook_item_value]" => "OSPF down between:%{event_object}-%{event_detected_by}, cost:%{new_cost}, detected by:%{event_detected_by}" } }
            } else if "-1" == [old_cost] {
                mutate {
                    add_field => {
                        "[@metadata][elasticsearch_index]" => "ospf-watcher-updown-events"
                        "[@metadata][mongo_id]" => "output_mongo_neighbors"
                        "[@metadata][mongo_collection_name]" => "adj_change"
                        "[@metadata][zabbix_host]" => "ospf_neighbor_up_down" 
                        "[@metadata][z_object_item_name]" => "ospf_neighbor_up_down"

                        "[@metadata][z_item_value]" => "OSPF up between:%{event_object}-%{event_detected_by}, cost:%{new_cost}, detected by:%{event_detected_by}"
                        "[@metadata][webhook_item_value]" => "OSPF up between:%{event_object}-%{event_detected_by}, cost:%{new_cost}, detected by:%{event_detected_by}" } }
            } else {
                mutate {
                    add_field => {
                        "[@metadata][elasticsearch_index]" => "ospf-watcher-costs-changes"
                        "[@metadata][mongo_id]" => "output_mongo_cost"
                        "[@metadata][mongo_collection_name]" => "cost_change"
                        "[@metadata][zabbix_host]" => "ospf_link_cost_change" 
                        "[@metadata][z_item_value]" => "OSPF link cost changed between:%{event_object}-%{event_detected_by}, old:%{old_cost}, new:%{new_cost}, detected by:%{event_detected_by}"
                        "[@metadata][webhook_item_value]" => "OSPF link cost changed between:%{event_object}-%{event_detected_by}, old:%{old_cost}, new:%{new_cost}, detected by:%{event_detected_by}" } }
            }
        }
        else if "network" in [message] {
            # 2024-07-22T20:24:08Z,watcher-local,network,8.8.0.60/30,changed,old_cost:-1,new_cost:12,10.10.10.5,01Jan2023_00h00m00s_7_hosts,0.0.0.0,65001,external,1
            dissect { 
                mapping => { "message" => "%{watcher_time},%{watcher_name},%{event_name},%{event_object},%{event_status},old_cost:%{old_cost},new_cost:%{new_cost},%{event_detected_by},%{graph_time},%{area_num},%{asn},%{subnet_type},%{int_ext_subtype}"}  
            }

            if "-1" == [new_cost] {
                mutate {
                    add_field => {
                        "[@metadata][elasticsearch_index]" => "ospf-watcher-updown-events"
                        "[@metadata][mongo_id]" => "output_mongo_neighbors"
                        "[@metadata][mongo_collection_name]" => "adj_change"
                        "[@metadata][zabbix_host]" => "ospf_network_up_down" 
                        "[@metadata][z_object_item_name]" => "ospf_network_up_down"
                        "[@metadata][z_item_value]" => "OSPF %{subnet_type} %{event_object} network down, cost:%{old_cost}, detected by:%{event_detected_by}"
                        "[@metadata][webhook_item_value]" => "OSPF %{subnet_type} %{event_object} network down, cost:%{old_cost}, detected by:%{event_detected_by}" } }
            } else if "-1" == [old_cost] {
                mutate {
                    add_field => {
                        "[@metadata][elasticsearch_index]" => "ospf-watcher-updown-events"
                        "[@metadata][mongo_id]" => "output_mongo_neighbors"
                        "[@metadata][mongo_collection_name]" => "adj_change"
                        "[@metadata][zabbix_host]" => "ospf_network_up_down" 
                        "[@metadata][z_object_item_name]" => "ospf_network_up_down"
                        "[@metadata][z_item_value]" => "OSPF %{subnet_type} %{event_object} network up, cost:%{new_cost}, detected by:%{event_detected_by}"
                        "[@metadata][webhook_item_value]" => "OSPF %{subnet_type} %{event_object} network up, cost:%{new_cost}, detected by:%{event_detected_by}" } }
            } else {
                mutate {
                    add_field => {
                        "[@metadata][elasticsearch_index]" => "ospf-watcher-costs-changes"
                        "[@metadata][mongo_id]" => "output_mongo_cost"
                        "[@metadata][mongo_collection_name]" => "cost_change"
                        "[@metadata][zabbix_host]" => "ospf_network_cost_change" 
                        "[@metadata][z_object_item_name]" => "ospf_stub_network_cost_change"
                        "[@metadata][z_item_value]" => "OSPF %{subnet_type} network cost changed:%{event_object}, old:%{old_cost}, new:%{new_cost}, detected by:%{event_detected_by}"
                        "[@metadata][webhook_item_value]" => "OSPF %{subnet_type} network cost changed:%{event_object}, old:%{old_cost}, new:%{new_cost}, detected by:%{event_detected_by}" } }
            }
        }
    }
    # Up/Down event for OSPF neighbors and subnets covered in changed event section!
    # 2023-01-01T00:00:00ZZ,demo-watcher,network,172.17.1.0/24,down,10.1.1.4,01Jan2023_00h00m00s_7_hosts,0.0.0.0,1234
    # 2023-01-01T00:00:00ZZ,demo-watcher,host,10.1.1.2,down,10.1.1.4,01Jan2023_00h00m00s_7_hosts,0.0.0.0,1234
    date {
        match => [ "watcher_time", "ISO8601" ]
        target => "watcher_time_iso8601"
    }
    mutate {
        remove_field => ["@version", "message"]
    }
}
output { 
    if "${DEBUG_BOOL:}" == "True" {
        stdout {
            codec  => rubydebug {
                metadata => true
            }
        }
    }
    ########## MongoDB plugin ###########
    # If EXPORT_TO_MONGO_BOOL is False - it doesn't block the pipeline #
    # If EXPORT_TO_MONGO_BOOL is True and MongoDB is not available - block the pipeline #
    if "${EXPORT_TO_MONGO_BOOL:}" == "True" {
        mongodb {
            id => "%{[@metadata][mongo_id]}"
            collection => "%{[@metadata][mongo_collection_name]}"
            database => "${MONGODB_DATABASE:admin}"
            uri => "mongodb://${MONGODB_USERNAME:admin}:${MONGODB_PASSWORD:myadminpassword}@${MONGODB_IP:127.0.0.1}:${MONGODB_PORT:27017}"        
            codec => "json"
            isodate => true
        } 
    }
    ########## Elastic plugin ###########
    # When the Elastic output plugin fails to connect to the ELK host, it will block all other outputs and it ignores "EXPORT_TO_ELASTICSEARCH_BOOL" value. 
    # Regardless of EXPORT_TO_ELASTICSEARCH_BOOL being False, it will connect to Elastic host ;( 
    # The solution - uncomment this portion of config in case of having running ELK.
    #
    # if "${EXPORT_TO_ELASTICSEARCH_BOOL:}" == "True" {
    #     elasticsearch { 
    #         hosts => "${ELASTIC_IP:172.25.80.1}:${ELASTIC_PORT:9200}"
    #         user => "${ELASTIC_USER_LOGIN:elastic}"
    #         password => "${ELASTIC_USER_PASS:changeme}"
    #         ecs_compatibility => disabled
    #         index => "%{[@metadata][elasticsearch_index]}"
    #     }  }
    if "${EXPORT_TO_ZABBIX_BOOL:}" == "True" {
        # Doesn't block the pipeline. If Zabbix host is unavailable, only ERROR message will be printed
        zabbix {
            zabbix_host => "[@metadata][zabbix_host]"
            zabbix_server_host => "${ZABBIX_HOST:127.0.0.1}"
            zabbix_key => "[@metadata][z_object_item_name]"
            zabbix_value => "[@metadata][z_item_value]"
        } }
    if "${EXPORT_TO_WEBHOOK_URL_BOOL:}" == "True" {
        http {
            url => "${WEBHOOK_URL:}"
            format => "json"
            http_method => "post"
            mapping => ["text", "%{[@metadata][webhook_item_value]}"]
            automatic_retries => 1
            retry_failed => false
        }
    }
}